{"version":3,"sources":["webpack://recreateTransform/webpack/universalModuleDefinition","webpack://recreateTransform/webpack/bootstrap","webpack://recreateTransform/external \"prosemirror-transform\"","webpack://recreateTransform/./node_modules/rfc6902/index.js","webpack://recreateTransform/./node_modules/rfc6902/util.js","webpack://recreateTransform/./node_modules/rfc6902/pointer.js","webpack://recreateTransform/./node_modules/rfc6902/equal.js","webpack://recreateTransform/./node_modules/rfc6902/patch.js","webpack://recreateTransform/./node_modules/rfc6902/diff.js","webpack://recreateTransform/./node_modules/diff/lib/index.es6.js","webpack://recreateTransform/./src/getReplaceStep.ts","webpack://recreateTransform/./src/removeMarks.ts","webpack://recreateTransform/./src/copy.ts","webpack://recreateTransform/./src/recreateTransform.ts","webpack://recreateTransform/./src/simplifyTransform.ts","webpack://recreateTransform/./src/getFromPath.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","require","define","amd","global","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","createTests","createPatch","applyPatch","pointer_1","patch_1","diff_1","createTest","input","path","endpoint","Pointer","fromJSON","evaluate","undefined","op","patch","map","operation","apply","output","diff","ptr","wrapVoidableDiff","wrappedDiff","custom_patch","Array","isArray","diffAny","tests","filter","isDestructive","forEach","pathTest","push","fromTest","from","clone","objectType","source","constructor","length_1","length","arrayTarget","objectTarget","unescape","token","replace","escape","tokens","this","split","Error","toString","join","parent","set","cursor","add","concat","String","compare","util_1","left","right","left_type","right_type","compareArrays","compareObjects","left_keys","keys","right_keys","extendStatics","__extends","b","setPrototypeOf","__proto__","__","InvalidOperationError","test","copy","move","remove","TestError","MissingError","equal_1","_super","_this","actual","expected","_add","index","parseInt","splice","_remove","from_endpoint","diffObjects","diffArrays","intersection","subtract","minuend","subtrahend","obj","add_key","del_key","objects","counter","appendArrayOperation","base","operations","cost","memo","input_length","isNaN","output_length","dist","j","memo_key","memoized","alternatives","remove_base","remove_operation","add_base","add_operation","replace_base","replace_operation","original","sort","a","reduce","_a","array_operation","padding","isArrayAdd","padded_index","index_token","isArrayRemove","replace_ptr","replace_operations","input_type","output_type","Diff","buildValues","components","newString","oldString","useLongestToken","componentPos","componentLen","newPos","oldPos","component","removed","slice","count","added","tmp","oldValue","lastComponent","equals","pop","clonePath","options","arguments","callback","self","done","setTimeout","castInput","removeEmpty","tokenize","newLen","oldLen","editLength","maxEditLength","bestPath","extractCommon","execEditLength","diagonalPath","basePath","addPath","removePath","_oldPos","canAdd","canRemove","pushComponent","exec","ret","last","commonCount","comparator","ignoreCase","toLowerCase","array","chars","characterDiff","extendedWordChars","reWhitespace","wordDiff","ignoreWhitespace","lineDiff","retLines","linesAndNewlines","line","newlineIsToken","trim","sentenceDiff","cssDiff","_typeof","iterator","objectPrototypeToString","jsonDiff","_this$options","undefinedReplacement","_this$options$stringi","stringifyReplacer","k","v","JSON","stringify","canonicalize","stack","replacementStack","replacer","canonicalizedObj","toJSON","_key","sortedKeys","arrayDiff","getReplaceStep","fromDoc","toDoc","start","content","findDiffStart","endA","endB","findDiffEnd","overlap","Math","min","resolve","depth","removeMarks","doc","tr","removeMark","nodeSize","parse","complexSteps","wordDiffs","simplifyDiff","schema","type","currentJSON","finalJSON","ops","recreateChangeContentSteps","recreateChangeMarkSteps","simplifyTransform","steps","newTr","docs","oldSteps","step","shift","merge","addedStep","afterStepJSON","pathParts","nodeFromJSON","check","error","includes","addSetNodeMarkup","addReplaceTextSteps","addReplaceStep","fromNode","nodeAt","toNode","nodeType","setNodeMarkup","attrs","marks","e","message","replaceWith","descendants","tNode","tPos","isInline","nodesBetween","fNode","fPos","max","to","nodeMark","isInSet","addMark","maybeStep","failed","op1","op2","afterOP1JSON","afterOP2JSON","op1Doc","op2Doc","finalText","currentText","getFromPath","textDiffs","diffWordsWithSpace","oldStr","newStr","diffChars","offset","textNode","text","mark","nextDiff","insert","delete","recreateTransform","init"],"mappings":"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","file":"recreateTransform.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"prosemirror-transform\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"prosemirror-transform\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"recreateTransform\"] = factory(require(\"prosemirror-transform\"));\n\telse\n\t\troot[\"recreateTransform\"] = factory(root[\"prosemirror-transform\"]);\n})(global, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createTests = exports.createPatch = exports.applyPatch = void 0;\nvar pointer_1 = require(\"./pointer\");\nvar patch_1 = require(\"./patch\");\nvar diff_1 = require(\"./diff\");\n/**\nApply a 'application/json-patch+json'-type patch to an object.\n\n`patch` *must* be an array of operations.\n\n> Operation objects MUST have exactly one \"op\" member, whose value\n> indicates the operation to perform.  Its value MUST be one of \"add\",\n> \"remove\", \"replace\", \"move\", \"copy\", or \"test\"; other values are\n> errors.\n\nThis method mutates the target object in-place.\n\n@returns list of results, one for each operation: `null` indicated success,\n         otherwise, the result will be an instance of one of the Error classes:\n         MissingError, InvalidOperationError, or TestError.\n*/\nfunction applyPatch(object, patch) {\n    return patch.map(function (operation) { return patch_1.apply(object, operation); });\n}\nexports.applyPatch = applyPatch;\nfunction wrapVoidableDiff(diff) {\n    function wrappedDiff(input, output, ptr) {\n        var custom_patch = diff(input, output, ptr);\n        // ensure an array is always returned\n        return Array.isArray(custom_patch) ? custom_patch : diff_1.diffAny(input, output, ptr, wrappedDiff);\n    }\n    return wrappedDiff;\n}\n/**\nProduce a 'application/json-patch+json'-type patch to get from one object to\nanother.\n\nThis does not alter `input` or `output` unless they have a property getter with\nside-effects (which is not a good idea anyway).\n\n`diff` is called on each pair of comparable non-primitive nodes in the\n`input`/`output` object trees, producing nested patches. Return `undefined`\nto fall back to default behaviour.\n\nReturns list of operations to perform on `input` to produce `output`.\n*/\nfunction createPatch(input, output, diff) {\n    var ptr = new pointer_1.Pointer();\n    // a new Pointer gets a default path of [''] if not specified\n    return (diff ? wrapVoidableDiff(diff) : diff_1.diffAny)(input, output, ptr);\n}\nexports.createPatch = createPatch;\n/**\nCreate a test operation based on `input`'s current evaluation of the JSON\nPointer `path`; if such a pointer cannot be resolved, returns undefined.\n*/\nfunction createTest(input, path) {\n    var endpoint = pointer_1.Pointer.fromJSON(path).evaluate(input);\n    if (endpoint !== undefined) {\n        return { op: 'test', path: path, value: endpoint.value };\n    }\n}\n/**\nProduce an 'application/json-patch+json'-type list of tests, to verify that\nexisting values in an object are identical to the those captured at some\ncheckpoint (whenever this function is called).\n\nThis does not alter `input` or `output` unless they have a property getter with\nside-effects (which is not a good idea anyway).\n\nReturns list of test operations.\n*/\nfunction createTests(input, patch) {\n    var tests = new Array();\n    patch.filter(diff_1.isDestructive).forEach(function (operation) {\n        var pathTest = createTest(input, operation.path);\n        if (pathTest)\n            tests.push(pathTest);\n        if ('from' in operation) {\n            var fromTest = createTest(input, operation.from);\n            if (fromTest)\n                tests.push(fromTest);\n        }\n    });\n    return tests;\n}\nexports.createTests = createTests;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clone = exports.objectType = exports.hasOwnProperty = void 0;\nexports.hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction objectType(object) {\n    if (object === undefined) {\n        return 'undefined';\n    }\n    if (object === null) {\n        return 'null';\n    }\n    if (Array.isArray(object)) {\n        return 'array';\n    }\n    return typeof object;\n}\nexports.objectType = objectType;\n/**\nRecursively copy a value.\n\n@param source - should be a JavaScript primitive, Array, or (plain old) Object.\n@returns copy of source where every Array and Object have been recursively\n         reconstructed from their constituent elements\n*/\nfunction clone(source) {\n    // loose-equality checking for null is faster than strict checking for each of null/undefined/true/false\n    // checking null first, then calling typeof, is faster than vice-versa\n    if (source == null || typeof source != 'object') {\n        // short-circuiting is faster than a single return\n        return source;\n    }\n    // x.constructor == Array is the fastest way to check if x is an Array\n    if (source.constructor == Array) {\n        // construction via imperative for-loop is faster than source.map(arrayVsObject)\n        var length_1 = source.length;\n        // setting the Array length during construction is faster than just `[]` or `new Array()`\n        var arrayTarget = new Array(length_1);\n        for (var i = 0; i < length_1; i++) {\n            arrayTarget[i] = clone(source[i]);\n        }\n        return arrayTarget;\n    }\n    // Object\n    var objectTarget = {};\n    // declaring the variable (with const) inside the loop is faster\n    for (var key in source) {\n        // hasOwnProperty costs a bit of performance, but it's semantically necessary\n        // using a global helper is MUCH faster than calling source.hasOwnProperty(key)\n        if (exports.hasOwnProperty.call(source, key)) {\n            objectTarget[key] = clone(source[key]);\n        }\n    }\n    return objectTarget;\n}\nexports.clone = clone;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Pointer = void 0;\n/**\nUnescape token part of a JSON Pointer string\n\n`token` should *not* contain any '/' characters.\n\n> Evaluation of each reference token begins by decoding any escaped\n> character sequence.  This is performed by first transforming any\n> occurrence of the sequence '~1' to '/', and then transforming any\n> occurrence of the sequence '~0' to '~'.  By performing the\n> substitutions in this order, an implementation avoids the error of\n> turning '~01' first into '~1' and then into '/', which would be\n> incorrect (the string '~01' correctly becomes '~1' after\n> transformation).\n\nHere's my take:\n\n~1 is unescaped with higher priority than ~0 because it is a lower-order escape character.\nI say \"lower order\" because '/' needs escaping due to the JSON Pointer serialization technique.\nWhereas, '~' is escaped because escaping '/' uses the '~' character.\n*/\nfunction unescape(token) {\n    return token.replace(/~1/g, '/').replace(/~0/g, '~');\n}\n/** Escape token part of a JSON Pointer string\n\n> '~' needs to be encoded as '~0' and '/'\n> needs to be encoded as '~1' when these characters appear in a\n> reference token.\n\nThis is the exact inverse of `unescape()`, so the reverse replacements must take place in reverse order.\n*/\nfunction escape(token) {\n    return token.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\n/**\nJSON Pointer representation\n*/\nvar Pointer = /** @class */ (function () {\n    function Pointer(tokens) {\n        if (tokens === void 0) { tokens = ['']; }\n        this.tokens = tokens;\n    }\n    /**\n    `path` *must* be a properly escaped string.\n    */\n    Pointer.fromJSON = function (path) {\n        var tokens = path.split('/').map(unescape);\n        if (tokens[0] !== '')\n            throw new Error(\"Invalid JSON Pointer: \" + path);\n        return new Pointer(tokens);\n    };\n    Pointer.prototype.toString = function () {\n        return this.tokens.map(escape).join('/');\n    };\n    /**\n    Returns an object with 'parent', 'key', and 'value' properties.\n    In the special case that this Pointer's path == \"\",\n    this object will be {parent: null, key: '', value: object}.\n    Otherwise, parent and key will have the property such that parent[key] == value.\n    */\n    Pointer.prototype.evaluate = function (object) {\n        var parent = null;\n        var key = '';\n        var value = object;\n        for (var i = 1, l = this.tokens.length; i < l; i++) {\n            parent = value;\n            key = this.tokens[i];\n            // not sure if this the best way to handle non-existant paths...\n            value = (parent || {})[key];\n        }\n        return { parent: parent, key: key, value: value };\n    };\n    Pointer.prototype.get = function (object) {\n        return this.evaluate(object).value;\n    };\n    Pointer.prototype.set = function (object, value) {\n        var cursor = object;\n        for (var i = 1, l = this.tokens.length - 1, token = this.tokens[i]; i < l; i++) {\n            // not sure if this the best way to handle non-existant paths...\n            cursor = (cursor || {})[token];\n        }\n        if (cursor) {\n            cursor[this.tokens[this.tokens.length - 1]] = value;\n        }\n    };\n    Pointer.prototype.push = function (token) {\n        // mutable\n        this.tokens.push(token);\n    };\n    /**\n    `token` should be a String. It'll be coerced to one anyway.\n  \n    immutable (shallowly)\n    */\n    Pointer.prototype.add = function (token) {\n        var tokens = this.tokens.concat(String(token));\n        return new Pointer(tokens);\n    };\n    return Pointer;\n}());\nexports.Pointer = Pointer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compare = void 0;\nvar util_1 = require(\"./util\");\n/**\nEvaluate `left === right`, treating `left` and `right` as ordered lists.\n\n@returns true iff `left` and `right` have identical lengths, and every element\n         of `left` is equal to the corresponding element of `right`. Equality is\n         determined recursivly, via `compare`.\n*/\nfunction compareArrays(left, right) {\n    var length = left.length;\n    if (length !== right.length) {\n        return false;\n    }\n    for (var i = 0; i < length; i++) {\n        if (!compare(left[i], right[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\nEvaluate `left === right`, treating `left` and `right` as property maps.\n\n@returns true iff every property in `left` has a value equal to the value of the\n         corresponding property in `right`, and vice-versa, stopping as soon as\n         possible. Equality is determined recursivly, via `compare`.\n*/\nfunction compareObjects(left, right) {\n    var left_keys = Object.keys(left);\n    var right_keys = Object.keys(right);\n    var length = left_keys.length;\n    // quick exit if the number of keys don't match up\n    if (length !== right_keys.length) {\n        return false;\n    }\n    // we don't know for sure that Set(left_keys) is equal to Set(right_keys),\n    // much less that their values in left and right are equal, but if right\n    // contains each key in left, we know it can't have any additional keys\n    for (var i = 0; i < length; i++) {\n        var key = left_keys[i];\n        if (!util_1.hasOwnProperty.call(right, key) || !compare(left[key], right[key])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n`compare()` returns true if `left` and `right` are materially equal\n(i.e., would produce equivalent JSON), false otherwise.\n\n> Here, \"equal\" means that the value at the target location and the\n> value conveyed by \"value\" are of the same JSON type, and that they\n> are considered equal by the following rules for that type:\n> o  strings: are considered equal if they contain the same number of\n>    Unicode characters and their code points are byte-by-byte equal.\n> o  numbers: are considered equal if their values are numerically\n>    equal.\n> o  arrays: are considered equal if they contain the same number of\n>    values, and if each value can be considered equal to the value at\n>    the corresponding position in the other array, using this list of\n>    type-specific rules.\n> o  objects: are considered equal if they contain the same number of\n>    members, and if each member can be considered equal to a member in\n>    the other object, by comparing their keys (as strings) and their\n>    values (using this list of type-specific rules).\n> o  literals (false, true, and null): are considered equal if they are\n>    the same.\n*/\nfunction compare(left, right) {\n    // strict equality handles literals, numbers, and strings (a sufficient but not necessary cause)\n    if (left === right) {\n        return true;\n    }\n    var left_type = util_1.objectType(left);\n    var right_type = util_1.objectType(right);\n    // check arrays\n    if (left_type == 'array' && right_type == 'array') {\n        return compareArrays(left, right);\n    }\n    // check objects\n    if (left_type == 'object' && right_type == 'object') {\n        return compareObjects(left, right);\n    }\n    // mismatched arrays & objects, etc., are always inequal\n    return false;\n}\nexports.compare = compare;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.apply = exports.InvalidOperationError = exports.test = exports.copy = exports.move = exports.replace = exports.remove = exports.add = exports.TestError = exports.MissingError = void 0;\nvar pointer_1 = require(\"./pointer\");\nvar util_1 = require(\"./util\");\nvar equal_1 = require(\"./equal\");\nvar MissingError = /** @class */ (function (_super) {\n    __extends(MissingError, _super);\n    function MissingError(path) {\n        var _this = _super.call(this, \"Value required at path: \" + path) || this;\n        _this.path = path;\n        _this.name = 'MissingError';\n        return _this;\n    }\n    return MissingError;\n}(Error));\nexports.MissingError = MissingError;\nvar TestError = /** @class */ (function (_super) {\n    __extends(TestError, _super);\n    function TestError(actual, expected) {\n        var _this = _super.call(this, \"Test failed: \" + actual + \" != \" + expected) || this;\n        _this.actual = actual;\n        _this.expected = expected;\n        _this.name = 'TestError';\n        return _this;\n    }\n    return TestError;\n}(Error));\nexports.TestError = TestError;\nfunction _add(object, key, value) {\n    if (Array.isArray(object)) {\n        // `key` must be an index\n        if (key == '-') {\n            object.push(value);\n        }\n        else {\n            var index = parseInt(key, 10);\n            object.splice(index, 0, value);\n        }\n    }\n    else {\n        object[key] = value;\n    }\n}\nfunction _remove(object, key) {\n    if (Array.isArray(object)) {\n        // '-' syntax doesn't make sense when removing\n        var index = parseInt(key, 10);\n        object.splice(index, 1);\n    }\n    else {\n        // not sure what the proper behavior is when path = ''\n        delete object[key];\n    }\n}\n/**\n>  o  If the target location specifies an array index, a new value is\n>     inserted into the array at the specified index.\n>  o  If the target location specifies an object member that does not\n>     already exist, a new member is added to the object.\n>  o  If the target location specifies an object member that does exist,\n>     that member's value is replaced.\n*/\nfunction add(object, operation) {\n    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n    // it's not exactly a \"MissingError\" in the same way that `remove` is -- more like a MissingParent, or something\n    if (endpoint.parent === undefined) {\n        return new MissingError(operation.path);\n    }\n    _add(endpoint.parent, endpoint.key, util_1.clone(operation.value));\n    return null;\n}\nexports.add = add;\n/**\n> The \"remove\" operation removes the value at the target location.\n> The target location MUST exist for the operation to be successful.\n*/\nfunction remove(object, operation) {\n    // endpoint has parent, key, and value properties\n    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n    if (endpoint.value === undefined) {\n        return new MissingError(operation.path);\n    }\n    // not sure what the proper behavior is when path = ''\n    _remove(endpoint.parent, endpoint.key);\n    return null;\n}\nexports.remove = remove;\n/**\n> The \"replace\" operation replaces the value at the target location\n> with a new value.  The operation object MUST contain a \"value\" member\n> whose content specifies the replacement value.\n> The target location MUST exist for the operation to be successful.\n\n> This operation is functionally identical to a \"remove\" operation for\n> a value, followed immediately by an \"add\" operation at the same\n> location with the replacement value.\n\nEven more simply, it's like the add operation with an existence check.\n*/\nfunction replace(object, operation) {\n    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n    if (endpoint.parent === null) {\n        return new MissingError(operation.path);\n    }\n    // this existence check treats arrays as a special case\n    if (Array.isArray(endpoint.parent)) {\n        if (parseInt(endpoint.key, 10) >= endpoint.parent.length) {\n            return new MissingError(operation.path);\n        }\n    }\n    else if (endpoint.value === undefined) {\n        return new MissingError(operation.path);\n    }\n    endpoint.parent[endpoint.key] = operation.value;\n    return null;\n}\nexports.replace = replace;\n/**\n> The \"move\" operation removes the value at a specified location and\n> adds it to the target location.\n> The operation object MUST contain a \"from\" member, which is a string\n> containing a JSON Pointer value that references the location in the\n> target document to move the value from.\n> This operation is functionally identical to a \"remove\" operation on\n> the \"from\" location, followed immediately by an \"add\" operation at\n> the target location with the value that was just removed.\n\n> The \"from\" location MUST NOT be a proper prefix of the \"path\"\n> location; i.e., a location cannot be moved into one of its children.\n\nTODO: throw if the check described in the previous paragraph fails.\n*/\nfunction move(object, operation) {\n    var from_endpoint = pointer_1.Pointer.fromJSON(operation.from).evaluate(object);\n    if (from_endpoint.value === undefined) {\n        return new MissingError(operation.from);\n    }\n    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n    if (endpoint.parent === undefined) {\n        return new MissingError(operation.path);\n    }\n    _remove(from_endpoint.parent, from_endpoint.key);\n    _add(endpoint.parent, endpoint.key, from_endpoint.value);\n    return null;\n}\nexports.move = move;\n/**\n> The \"copy\" operation copies the value at a specified location to the\n> target location.\n> The operation object MUST contain a \"from\" member, which is a string\n> containing a JSON Pointer value that references the location in the\n> target document to copy the value from.\n> The \"from\" location MUST exist for the operation to be successful.\n\n> This operation is functionally identical to an \"add\" operation at the\n> target location using the value specified in the \"from\" member.\n\nAlternatively, it's like 'move' without the 'remove'.\n*/\nfunction copy(object, operation) {\n    var from_endpoint = pointer_1.Pointer.fromJSON(operation.from).evaluate(object);\n    if (from_endpoint.value === undefined) {\n        return new MissingError(operation.from);\n    }\n    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n    if (endpoint.parent === undefined) {\n        return new MissingError(operation.path);\n    }\n    _add(endpoint.parent, endpoint.key, util_1.clone(from_endpoint.value));\n    return null;\n}\nexports.copy = copy;\n/**\n> The \"test\" operation tests that a value at the target location is\n> equal to a specified value.\n> The operation object MUST contain a \"value\" member that conveys the\n> value to be compared to the target location's value.\n> The target location MUST be equal to the \"value\" value for the\n> operation to be considered successful.\n*/\nfunction test(object, operation) {\n    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n    var result = equal_1.compare(endpoint.value, operation.value);\n    if (!result) {\n        return new TestError(endpoint.value, operation.value);\n    }\n    return null;\n}\nexports.test = test;\nvar InvalidOperationError = /** @class */ (function (_super) {\n    __extends(InvalidOperationError, _super);\n    function InvalidOperationError(operation) {\n        var _this = _super.call(this, \"Invalid operation: \" + operation.op) || this;\n        _this.operation = operation;\n        _this.name = 'InvalidOperationError';\n        return _this;\n    }\n    return InvalidOperationError;\n}(Error));\nexports.InvalidOperationError = InvalidOperationError;\n/**\nSwitch on `operation.op`, applying the corresponding patch function for each\ncase to `object`.\n*/\nfunction apply(object, operation) {\n    // not sure why TypeScript can't infer typesafety of:\n    //   {add, remove, replace, move, copy, test}[operation.op](object, operation)\n    // (seems like a bug)\n    switch (operation.op) {\n        case 'add': return add(object, operation);\n        case 'remove': return remove(object, operation);\n        case 'replace': return replace(object, operation);\n        case 'move': return move(object, operation);\n        case 'copy': return copy(object, operation);\n        case 'test': return test(object, operation);\n    }\n    return new InvalidOperationError(operation);\n}\nexports.apply = apply;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.diffAny = exports.diffObjects = exports.diffArrays = exports.intersection = exports.subtract = exports.isDestructive = void 0;\nvar equal_1 = require(\"./equal\");\nvar util_1 = require(\"./util\");\nfunction isDestructive(_a) {\n    var op = _a.op;\n    return op === 'remove' || op === 'replace' || op === 'copy' || op === 'move';\n}\nexports.isDestructive = isDestructive;\n/**\nList the keys in `minuend` that are not in `subtrahend`.\n\nA key is only considered if it is both 1) an own-property (o.hasOwnProperty(k))\nof the object, and 2) has a value that is not undefined. This is to match JSON\nsemantics, where JSON object serialization drops keys with undefined values.\n\n@param minuend Object of interest\n@param subtrahend Object of comparison\n@returns Array of keys that are in `minuend` but not in `subtrahend`.\n*/\nfunction subtract(minuend, subtrahend) {\n    // initialize empty object; we only care about the keys, the values can be anything\n    var obj = {};\n    // build up obj with all the properties of minuend\n    for (var add_key in minuend) {\n        if (util_1.hasOwnProperty.call(minuend, add_key) && minuend[add_key] !== undefined) {\n            obj[add_key] = 1;\n        }\n    }\n    // now delete all the properties of subtrahend from obj\n    // (deleting a missing key has no effect)\n    for (var del_key in subtrahend) {\n        if (util_1.hasOwnProperty.call(subtrahend, del_key) && subtrahend[del_key] !== undefined) {\n            delete obj[del_key];\n        }\n    }\n    // finally, extract whatever keys remain in obj\n    return Object.keys(obj);\n}\nexports.subtract = subtract;\n/**\nList the keys that shared by all `objects`.\n\nThe semantics of what constitutes a \"key\" is described in {@link subtract}.\n\n@param objects Array of objects to compare\n@returns Array of keys that are in (\"own-properties\" of) every object in `objects`.\n*/\nfunction intersection(objects) {\n    var length = objects.length;\n    // prepare empty counter to keep track of how many objects each key occurred in\n    var counter = {};\n    // go through each object and increment the counter for each key in that object\n    for (var i = 0; i < length; i++) {\n        var object = objects[i];\n        for (var key in object) {\n            if (util_1.hasOwnProperty.call(object, key) && object[key] !== undefined) {\n                counter[key] = (counter[key] || 0) + 1;\n            }\n        }\n    }\n    // now delete all keys from the counter that were not seen in every object\n    for (var key in counter) {\n        if (counter[key] < length) {\n            delete counter[key];\n        }\n    }\n    // finally, extract whatever keys remain in the counter\n    return Object.keys(counter);\n}\nexports.intersection = intersection;\nfunction isArrayAdd(array_operation) {\n    return array_operation.op === 'add';\n}\nfunction isArrayRemove(array_operation) {\n    return array_operation.op === 'remove';\n}\nfunction appendArrayOperation(base, operation) {\n    return {\n        // the new operation must be pushed on the end\n        operations: base.operations.concat(operation),\n        cost: base.cost + 1,\n    };\n}\n/**\nCalculate the shortest sequence of operations to get from `input` to `output`,\nusing a dynamic programming implementation of the Levenshtein distance algorithm.\n\nTo get from the input ABC to the output AZ we could just delete all the input\nand say \"insert A, insert Z\" and be done with it. That's what we do if the\ninput is empty. But we can be smarter.\n\n          output\n               A   Z\n               -   -\n          [0]  1   2\ninput A |  1  [0]  1\n      B |  2  [1]  1\n      C |  3   2  [2]\n\n1) start at 0,0 (+0)\n2) keep A (+0)\n3) remove B (+1)\n4) replace C with Z (+1)\n\nIf the `input` (source) is empty, they'll all be in the top row, resulting in an\narray of 'add' operations.\nIf the `output` (target) is empty, everything will be in the left column,\nresulting in an array of 'remove' operations.\n\n@returns A list of add/remove/replace operations.\n*/\nfunction diffArrays(input, output, ptr, diff) {\n    if (diff === void 0) { diff = diffAny; }\n    // set up cost matrix (very simple initialization: just a map)\n    var memo = {\n        '0,0': { operations: [], cost: 0 },\n    };\n    /**\n    Calculate the cheapest sequence of operations required to get from\n    input.slice(0, i) to output.slice(0, j).\n    There may be other valid sequences with the same cost, but none cheaper.\n  \n    @param i The row in the layout above\n    @param j The column in the layout above\n    @returns An object containing a list of operations, along with the total cost\n             of applying them (+1 for each add/remove/replace operation)\n    */\n    function dist(i, j) {\n        // memoized\n        var memo_key = i + \",\" + j;\n        var memoized = memo[memo_key];\n        if (memoized === undefined) {\n            if (i > 0 && j > 0 && equal_1.compare(input[i - 1], output[j - 1])) {\n                // equal (no operations => no cost)\n                memoized = dist(i - 1, j - 1);\n            }\n            else {\n                var alternatives = [];\n                if (i > 0) {\n                    // NOT topmost row\n                    var remove_base = dist(i - 1, j);\n                    var remove_operation = {\n                        op: 'remove',\n                        index: i - 1,\n                    };\n                    alternatives.push(appendArrayOperation(remove_base, remove_operation));\n                }\n                if (j > 0) {\n                    // NOT leftmost column\n                    var add_base = dist(i, j - 1);\n                    var add_operation = {\n                        op: 'add',\n                        index: i - 1,\n                        value: output[j - 1],\n                    };\n                    alternatives.push(appendArrayOperation(add_base, add_operation));\n                }\n                if (i > 0 && j > 0) {\n                    // TABLE MIDDLE\n                    // supposing we replaced it, compute the rest of the costs:\n                    var replace_base = dist(i - 1, j - 1);\n                    // okay, the general plan is to replace it, but we can be smarter,\n                    // recursing into the structure and replacing only part of it if\n                    // possible, but to do so we'll need the original value\n                    var replace_operation = {\n                        op: 'replace',\n                        index: i - 1,\n                        original: input[i - 1],\n                        value: output[j - 1],\n                    };\n                    alternatives.push(appendArrayOperation(replace_base, replace_operation));\n                }\n                // the only other case, i === 0 && j === 0, has already been memoized\n                // the meat of the algorithm:\n                // sort by cost to find the lowest one (might be several ties for lowest)\n                // [4, 6, 7, 1, 2].sort((a, b) => a - b) -> [ 1, 2, 4, 6, 7 ]\n                var best = alternatives.sort(function (a, b) { return a.cost - b.cost; })[0];\n                memoized = best;\n            }\n            memo[memo_key] = memoized;\n        }\n        return memoized;\n    }\n    // handle weird objects masquerading as Arrays that don't have proper length\n    // properties by using 0 for everything but positive numbers\n    var input_length = (isNaN(input.length) || input.length <= 0) ? 0 : input.length;\n    var output_length = (isNaN(output.length) || output.length <= 0) ? 0 : output.length;\n    var array_operations = dist(input_length, output_length).operations;\n    var padded_operations = array_operations.reduce(function (_a, array_operation) {\n        var operations = _a[0], padding = _a[1];\n        if (isArrayAdd(array_operation)) {\n            var padded_index = array_operation.index + 1 + padding;\n            var index_token = padded_index < (input_length + padding) ? String(padded_index) : '-';\n            var operation = {\n                op: array_operation.op,\n                path: ptr.add(index_token).toString(),\n                value: array_operation.value,\n            };\n            // padding++ // maybe only if array_operation.index > -1 ?\n            return [operations.concat(operation), padding + 1];\n        }\n        else if (isArrayRemove(array_operation)) {\n            var operation = {\n                op: array_operation.op,\n                path: ptr.add(String(array_operation.index + padding)).toString(),\n            };\n            // padding--\n            return [operations.concat(operation), padding - 1];\n        }\n        else { // replace\n            var replace_ptr = ptr.add(String(array_operation.index + padding));\n            var replace_operations = diff(array_operation.original, array_operation.value, replace_ptr);\n            return [operations.concat.apply(operations, replace_operations), padding];\n        }\n    }, [[], 0])[0];\n    return padded_operations;\n}\nexports.diffArrays = diffArrays;\nfunction diffObjects(input, output, ptr, diff) {\n    if (diff === void 0) { diff = diffAny; }\n    // if a key is in input but not output -> remove it\n    var operations = [];\n    subtract(input, output).forEach(function (key) {\n        operations.push({ op: 'remove', path: ptr.add(key).toString() });\n    });\n    // if a key is in output but not input -> add it\n    subtract(output, input).forEach(function (key) {\n        operations.push({ op: 'add', path: ptr.add(key).toString(), value: output[key] });\n    });\n    // if a key is in both, diff it recursively\n    intersection([input, output]).forEach(function (key) {\n        operations.push.apply(operations, diff(input[key], output[key], ptr.add(key)));\n    });\n    return operations;\n}\nexports.diffObjects = diffObjects;\n/**\n`diffAny()` returns an empty array if `input` and `output` are materially equal\n(i.e., would produce equivalent JSON); otherwise it produces an array of patches\nthat would transform `input` into `output`.\n*/\nfunction diffAny(input, output, ptr, diff) {\n    if (diff === void 0) { diff = diffAny; }\n    // strict equality handles literals, numbers, and strings (a sufficient but not necessary cause)\n    if (input === output) {\n        return [];\n    }\n    var input_type = util_1.objectType(input);\n    var output_type = util_1.objectType(output);\n    if (input_type == 'array' && output_type == 'array') {\n        return diffArrays(input, output, ptr, diff);\n    }\n    if (input_type == 'object' && output_type == 'object') {\n        return diffObjects(input, output, ptr, diff);\n    }\n    // at this point we know that input and output are materially different;\n    // could be array -> object, object -> array, boolean -> undefined,\n    // number -> string, or some other combination, but nothing that can be split\n    // up into multiple patches: so `output` must replace `input` wholesale.\n    return [{ op: 'replace', path: ptr.toString(), value: output }];\n}\nexports.diffAny = diffAny;\n","function Diff() {}\nDiff.prototype = {\n  diff: function diff(oldString, newString) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var callback = options.callback;\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    this.options = options;\n    var self = this;\n\n    function done(value) {\n      if (callback) {\n        setTimeout(function () {\n          callback(undefined, value);\n        }, 0);\n        return true;\n      } else {\n        return value;\n      }\n    } // Allow subclasses to massage the input prior to running\n\n\n    oldString = this.castInput(oldString);\n    newString = this.castInput(newString);\n    oldString = this.removeEmpty(this.tokenize(oldString));\n    newString = this.removeEmpty(this.tokenize(newString));\n    var newLen = newString.length,\n        oldLen = oldString.length;\n    var editLength = 1;\n    var maxEditLength = newLen + oldLen;\n    var bestPath = [{\n      newPos: -1,\n      components: []\n    }]; // Seed editLength = 0, i.e. the content starts with the same values\n\n    var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n\n    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {\n      // Identity per the equality and tokenizer\n      return done([{\n        value: this.join(newString),\n        count: newString.length\n      }]);\n    } // Main worker method. checks all permutations of a given edit length for acceptance.\n\n\n    function execEditLength() {\n      for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {\n        var basePath = void 0;\n\n        var addPath = bestPath[diagonalPath - 1],\n            removePath = bestPath[diagonalPath + 1],\n            _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n\n        if (addPath) {\n          // No one else is going to attempt to use this value, clear it\n          bestPath[diagonalPath - 1] = undefined;\n        }\n\n        var canAdd = addPath && addPath.newPos + 1 < newLen,\n            canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;\n\n        if (!canAdd && !canRemove) {\n          // If this path is a terminal then prune\n          bestPath[diagonalPath] = undefined;\n          continue;\n        } // Select the diagonal that we want to branch from. We select the prior\n        // path whose position in the new string is the farthest from the origin\n        // and does not pass the bounds of the diff graph\n\n\n        if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {\n          basePath = clonePath(removePath);\n          self.pushComponent(basePath.components, undefined, true);\n        } else {\n          basePath = addPath; // No need to clone, we've pulled it from the list\n\n          basePath.newPos++;\n          self.pushComponent(basePath.components, true, undefined);\n        }\n\n        _oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath); // If we have hit the end of both strings, then we are done\n\n        if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {\n          return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));\n        } else {\n          // Otherwise track this path as a potential candidate and continue.\n          bestPath[diagonalPath] = basePath;\n        }\n      }\n\n      editLength++;\n    } // Performs the length of edit iteration. Is a bit fugly as this has to support the\n    // sync and async mode which is never fun. Loops over execEditLength until a value\n    // is produced.\n\n\n    if (callback) {\n      (function exec() {\n        setTimeout(function () {\n          // This should not happen, but we want to be safe.\n\n          /* istanbul ignore next */\n          if (editLength > maxEditLength) {\n            return callback();\n          }\n\n          if (!execEditLength()) {\n            exec();\n          }\n        }, 0);\n      })();\n    } else {\n      while (editLength <= maxEditLength) {\n        var ret = execEditLength();\n\n        if (ret) {\n          return ret;\n        }\n      }\n    }\n  },\n  pushComponent: function pushComponent(components, added, removed) {\n    var last = components[components.length - 1];\n\n    if (last && last.added === added && last.removed === removed) {\n      // We need to clone here as the component clone operation is just\n      // as shallow array clone\n      components[components.length - 1] = {\n        count: last.count + 1,\n        added: added,\n        removed: removed\n      };\n    } else {\n      components.push({\n        count: 1,\n        added: added,\n        removed: removed\n      });\n    }\n  },\n  extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {\n    var newLen = newString.length,\n        oldLen = oldString.length,\n        newPos = basePath.newPos,\n        oldPos = newPos - diagonalPath,\n        commonCount = 0;\n\n    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {\n      newPos++;\n      oldPos++;\n      commonCount++;\n    }\n\n    if (commonCount) {\n      basePath.components.push({\n        count: commonCount\n      });\n    }\n\n    basePath.newPos = newPos;\n    return oldPos;\n  },\n  equals: function equals(left, right) {\n    if (this.options.comparator) {\n      return this.options.comparator(left, right);\n    } else {\n      return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();\n    }\n  },\n  removeEmpty: function removeEmpty(array) {\n    var ret = [];\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i]) {\n        ret.push(array[i]);\n      }\n    }\n\n    return ret;\n  },\n  castInput: function castInput(value) {\n    return value;\n  },\n  tokenize: function tokenize(value) {\n    return value.split('');\n  },\n  join: function join(chars) {\n    return chars.join('');\n  }\n};\n\nfunction buildValues(diff, components, newString, oldString, useLongestToken) {\n  var componentPos = 0,\n      componentLen = components.length,\n      newPos = 0,\n      oldPos = 0;\n\n  for (; componentPos < componentLen; componentPos++) {\n    var component = components[componentPos];\n\n    if (!component.removed) {\n      if (!component.added && useLongestToken) {\n        var value = newString.slice(newPos, newPos + component.count);\n        value = value.map(function (value, i) {\n          var oldValue = oldString[oldPos + i];\n          return oldValue.length > value.length ? oldValue : value;\n        });\n        component.value = diff.join(value);\n      } else {\n        component.value = diff.join(newString.slice(newPos, newPos + component.count));\n      }\n\n      newPos += component.count; // Common case\n\n      if (!component.added) {\n        oldPos += component.count;\n      }\n    } else {\n      component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));\n      oldPos += component.count; // Reverse add and remove so removes are output first to match common convention\n      // The diffing algorithm is tied to add then remove output and this is the simplest\n      // route to get the desired output with minimal overhead.\n\n      if (componentPos && components[componentPos - 1].added) {\n        var tmp = components[componentPos - 1];\n        components[componentPos - 1] = components[componentPos];\n        components[componentPos] = tmp;\n      }\n    }\n  } // Special case handle for when one terminal is ignored (i.e. whitespace).\n  // For this case we merge the terminal into the prior string and drop the change.\n  // This is only available for string mode.\n\n\n  var lastComponent = components[componentLen - 1];\n\n  if (componentLen > 1 && typeof lastComponent.value === 'string' && (lastComponent.added || lastComponent.removed) && diff.equals('', lastComponent.value)) {\n    components[componentLen - 2].value += lastComponent.value;\n    components.pop();\n  }\n\n  return components;\n}\n\nfunction clonePath(path) {\n  return {\n    newPos: path.newPos,\n    components: path.components.slice(0)\n  };\n}\n\nvar characterDiff = new Diff();\nfunction diffChars(oldStr, newStr, options) {\n  return characterDiff.diff(oldStr, newStr, options);\n}\n\nfunction generateOptions(options, defaults) {\n  if (typeof options === 'function') {\n    defaults.callback = options;\n  } else if (options) {\n    for (var name in options) {\n      /* istanbul ignore else */\n      if (options.hasOwnProperty(name)) {\n        defaults[name] = options[name];\n      }\n    }\n  }\n\n  return defaults;\n}\n\n//\n// Ranges and exceptions:\n// Latin-1 Supplement, 0080–00FF\n//  - U+00D7  × Multiplication sign\n//  - U+00F7  ÷ Division sign\n// Latin Extended-A, 0100–017F\n// Latin Extended-B, 0180–024F\n// IPA Extensions, 0250–02AF\n// Spacing Modifier Letters, 02B0–02FF\n//  - U+02C7  ˇ &#711;  Caron\n//  - U+02D8  ˘ &#728;  Breve\n//  - U+02D9  ˙ &#729;  Dot Above\n//  - U+02DA  ˚ &#730;  Ring Above\n//  - U+02DB  ˛ &#731;  Ogonek\n//  - U+02DC  ˜ &#732;  Small Tilde\n//  - U+02DD  ˝ &#733;  Double Acute Accent\n// Latin Extended Additional, 1E00–1EFF\n\nvar extendedWordChars = /^[A-Za-z\\xC0-\\u02C6\\u02C8-\\u02D7\\u02DE-\\u02FF\\u1E00-\\u1EFF]+$/;\nvar reWhitespace = /\\S/;\nvar wordDiff = new Diff();\n\nwordDiff.equals = function (left, right) {\n  if (this.options.ignoreCase) {\n    left = left.toLowerCase();\n    right = right.toLowerCase();\n  }\n\n  return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);\n};\n\nwordDiff.tokenize = function (value) {\n  var tokens = value.split(/(\\s+|[()[\\]{}'\"]|\\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.\n\n  for (var i = 0; i < tokens.length - 1; i++) {\n    // If we have an empty string in the next field and we have only word chars before and after, merge\n    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {\n      tokens[i] += tokens[i + 2];\n      tokens.splice(i + 1, 2);\n      i--;\n    }\n  }\n\n  return tokens;\n};\n\nfunction diffWords(oldStr, newStr, options) {\n  options = generateOptions(options, {\n    ignoreWhitespace: true\n  });\n  return wordDiff.diff(oldStr, newStr, options);\n}\nfunction diffWordsWithSpace(oldStr, newStr, options) {\n  return wordDiff.diff(oldStr, newStr, options);\n}\n\nvar lineDiff = new Diff();\n\nlineDiff.tokenize = function (value) {\n  var retLines = [],\n      linesAndNewlines = value.split(/(\\n|\\r\\n)/); // Ignore the final empty token that occurs if the string ends with a new line\n\n  if (!linesAndNewlines[linesAndNewlines.length - 1]) {\n    linesAndNewlines.pop();\n  } // Merge the content and line separators into single tokens\n\n\n  for (var i = 0; i < linesAndNewlines.length; i++) {\n    var line = linesAndNewlines[i];\n\n    if (i % 2 && !this.options.newlineIsToken) {\n      retLines[retLines.length - 1] += line;\n    } else {\n      if (this.options.ignoreWhitespace) {\n        line = line.trim();\n      }\n\n      retLines.push(line);\n    }\n  }\n\n  return retLines;\n};\n\nfunction diffLines(oldStr, newStr, callback) {\n  return lineDiff.diff(oldStr, newStr, callback);\n}\nfunction diffTrimmedLines(oldStr, newStr, callback) {\n  var options = generateOptions(callback, {\n    ignoreWhitespace: true\n  });\n  return lineDiff.diff(oldStr, newStr, options);\n}\n\nvar sentenceDiff = new Diff();\n\nsentenceDiff.tokenize = function (value) {\n  return value.split(/(\\S.+?[.!?])(?=\\s+|$)/);\n};\n\nfunction diffSentences(oldStr, newStr, callback) {\n  return sentenceDiff.diff(oldStr, newStr, callback);\n}\n\nvar cssDiff = new Diff();\n\ncssDiff.tokenize = function (value) {\n  return value.split(/([{}:;,]|\\s+)/);\n};\n\nfunction diffCss(oldStr, newStr, callback) {\n  return cssDiff.diff(oldStr, newStr, callback);\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nvar objectPrototypeToString = Object.prototype.toString;\nvar jsonDiff = new Diff(); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a\n// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:\n\njsonDiff.useLongestToken = true;\njsonDiff.tokenize = lineDiff.tokenize;\n\njsonDiff.castInput = function (value) {\n  var _this$options = this.options,\n      undefinedReplacement = _this$options.undefinedReplacement,\n      _this$options$stringi = _this$options.stringifyReplacer,\n      stringifyReplacer = _this$options$stringi === void 0 ? function (k, v) {\n    return typeof v === 'undefined' ? undefinedReplacement : v;\n  } : _this$options$stringi;\n  return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');\n};\n\njsonDiff.equals = function (left, right) {\n  return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\\r\\n])/g, '$1'), right.replace(/,([\\r\\n])/g, '$1'));\n};\n\nfunction diffJson(oldObj, newObj, options) {\n  return jsonDiff.diff(oldObj, newObj, options);\n} // This function handles the presence of circular references by bailing out when encountering an\n// object that is already on the \"stack\" of items being processed. Accepts an optional replacer\n\nfunction canonicalize(obj, stack, replacementStack, replacer, key) {\n  stack = stack || [];\n  replacementStack = replacementStack || [];\n\n  if (replacer) {\n    obj = replacer(key, obj);\n  }\n\n  var i;\n\n  for (i = 0; i < stack.length; i += 1) {\n    if (stack[i] === obj) {\n      return replacementStack[i];\n    }\n  }\n\n  var canonicalizedObj;\n\n  if ('[object Array]' === objectPrototypeToString.call(obj)) {\n    stack.push(obj);\n    canonicalizedObj = new Array(obj.length);\n    replacementStack.push(canonicalizedObj);\n\n    for (i = 0; i < obj.length; i += 1) {\n      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);\n    }\n\n    stack.pop();\n    replacementStack.pop();\n    return canonicalizedObj;\n  }\n\n  if (obj && obj.toJSON) {\n    obj = obj.toJSON();\n  }\n\n  if (_typeof(obj) === 'object' && obj !== null) {\n    stack.push(obj);\n    canonicalizedObj = {};\n    replacementStack.push(canonicalizedObj);\n\n    var sortedKeys = [],\n        _key;\n\n    for (_key in obj) {\n      /* istanbul ignore else */\n      if (obj.hasOwnProperty(_key)) {\n        sortedKeys.push(_key);\n      }\n    }\n\n    sortedKeys.sort();\n\n    for (i = 0; i < sortedKeys.length; i += 1) {\n      _key = sortedKeys[i];\n      canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);\n    }\n\n    stack.pop();\n    replacementStack.pop();\n  } else {\n    canonicalizedObj = obj;\n  }\n\n  return canonicalizedObj;\n}\n\nvar arrayDiff = new Diff();\n\narrayDiff.tokenize = function (value) {\n  return value.slice();\n};\n\narrayDiff.join = arrayDiff.removeEmpty = function (value) {\n  return value;\n};\n\nfunction diffArrays(oldArr, newArr, callback) {\n  return arrayDiff.diff(oldArr, newArr, callback);\n}\n\nfunction parsePatch(uniDiff) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var diffstr = uniDiff.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n      delimiters = uniDiff.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n      list = [],\n      i = 0;\n\n  function parseIndex() {\n    var index = {};\n    list.push(index); // Parse diff metadata\n\n    while (i < diffstr.length) {\n      var line = diffstr[i]; // File header found, end parsing diff metadata\n\n      if (/^(\\-\\-\\-|\\+\\+\\+|@@)\\s/.test(line)) {\n        break;\n      } // Diff index\n\n\n      var header = /^(?:Index:|diff(?: -r \\w+)+)\\s+(.+?)\\s*$/.exec(line);\n\n      if (header) {\n        index.index = header[1];\n      }\n\n      i++;\n    } // Parse file headers if they are defined. Unified diff requires them, but\n    // there's no technical issues to have an isolated hunk without file header\n\n\n    parseFileHeader(index);\n    parseFileHeader(index); // Parse hunks\n\n    index.hunks = [];\n\n    while (i < diffstr.length) {\n      var _line = diffstr[i];\n\n      if (/^(Index:|diff|\\-\\-\\-|\\+\\+\\+)\\s/.test(_line)) {\n        break;\n      } else if (/^@@/.test(_line)) {\n        index.hunks.push(parseHunk());\n      } else if (_line && options.strict) {\n        // Ignore unexpected content unless in strict mode\n        throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));\n      } else {\n        i++;\n      }\n    }\n  } // Parses the --- and +++ headers, if none are found, no lines\n  // are consumed.\n\n\n  function parseFileHeader(index) {\n    var fileHeader = /^(---|\\+\\+\\+)\\s+(.*)$/.exec(diffstr[i]);\n\n    if (fileHeader) {\n      var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';\n      var data = fileHeader[2].split('\\t', 2);\n      var fileName = data[0].replace(/\\\\\\\\/g, '\\\\');\n\n      if (/^\".*\"$/.test(fileName)) {\n        fileName = fileName.substr(1, fileName.length - 2);\n      }\n\n      index[keyPrefix + 'FileName'] = fileName;\n      index[keyPrefix + 'Header'] = (data[1] || '').trim();\n      i++;\n    }\n  } // Parses a hunk\n  // This assumes that we are at the start of a hunk.\n\n\n  function parseHunk() {\n    var chunkHeaderIndex = i,\n        chunkHeaderLine = diffstr[i++],\n        chunkHeader = chunkHeaderLine.split(/@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@/);\n    var hunk = {\n      oldStart: +chunkHeader[1],\n      oldLines: +chunkHeader[2] || 1,\n      newStart: +chunkHeader[3],\n      newLines: +chunkHeader[4] || 1,\n      lines: [],\n      linedelimiters: []\n    };\n    var addCount = 0,\n        removeCount = 0;\n\n    for (; i < diffstr.length; i++) {\n      // Lines starting with '---' could be mistaken for the \"remove line\" operation\n      // But they could be the header for the next file. Therefore prune such cases out.\n      if (diffstr[i].indexOf('--- ') === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf('+++ ') === 0 && diffstr[i + 2].indexOf('@@') === 0) {\n        break;\n      }\n\n      var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? ' ' : diffstr[i][0];\n\n      if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\\\') {\n        hunk.lines.push(diffstr[i]);\n        hunk.linedelimiters.push(delimiters[i] || '\\n');\n\n        if (operation === '+') {\n          addCount++;\n        } else if (operation === '-') {\n          removeCount++;\n        } else if (operation === ' ') {\n          addCount++;\n          removeCount++;\n        }\n      } else {\n        break;\n      }\n    } // Handle the empty block count case\n\n\n    if (!addCount && hunk.newLines === 1) {\n      hunk.newLines = 0;\n    }\n\n    if (!removeCount && hunk.oldLines === 1) {\n      hunk.oldLines = 0;\n    } // Perform optional sanity checking\n\n\n    if (options.strict) {\n      if (addCount !== hunk.newLines) {\n        throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n      }\n\n      if (removeCount !== hunk.oldLines) {\n        throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));\n      }\n    }\n\n    return hunk;\n  }\n\n  while (i < diffstr.length) {\n    parseIndex();\n  }\n\n  return list;\n}\n\n// Iterator that traverses in the range of [min, max], stepping\n// by distance from a given start position. I.e. for [0, 4], with\n// start of 2, this will iterate 2, 3, 1, 4, 0.\nfunction distanceIterator (start, minLine, maxLine) {\n  var wantForward = true,\n      backwardExhausted = false,\n      forwardExhausted = false,\n      localOffset = 1;\n  return function iterator() {\n    if (wantForward && !forwardExhausted) {\n      if (backwardExhausted) {\n        localOffset++;\n      } else {\n        wantForward = false;\n      } // Check if trying to fit beyond text length, and if not, check it fits\n      // after offset location (or desired location on first iteration)\n\n\n      if (start + localOffset <= maxLine) {\n        return localOffset;\n      }\n\n      forwardExhausted = true;\n    }\n\n    if (!backwardExhausted) {\n      if (!forwardExhausted) {\n        wantForward = true;\n      } // Check if trying to fit before text beginning, and if not, check it fits\n      // before offset location\n\n\n      if (minLine <= start - localOffset) {\n        return -localOffset++;\n      }\n\n      backwardExhausted = true;\n      return iterator();\n    } // We tried to fit hunk before text beginning and beyond text length, then\n    // hunk can't fit on the text. Return undefined\n\n  };\n}\n\nfunction applyPatch(source, uniDiff) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (typeof uniDiff === 'string') {\n    uniDiff = parsePatch(uniDiff);\n  }\n\n  if (Array.isArray(uniDiff)) {\n    if (uniDiff.length > 1) {\n      throw new Error('applyPatch only works with a single input.');\n    }\n\n    uniDiff = uniDiff[0];\n  } // Apply the diff to the input\n\n\n  var lines = source.split(/\\r\\n|[\\n\\v\\f\\r\\x85]/),\n      delimiters = source.match(/\\r\\n|[\\n\\v\\f\\r\\x85]/g) || [],\n      hunks = uniDiff.hunks,\n      compareLine = options.compareLine || function (lineNumber, line, operation, patchContent) {\n    return line === patchContent;\n  },\n      errorCount = 0,\n      fuzzFactor = options.fuzzFactor || 0,\n      minLine = 0,\n      offset = 0,\n      removeEOFNL,\n      addEOFNL;\n  /**\n   * Checks if the hunk exactly fits on the provided location\n   */\n\n\n  function hunkFits(hunk, toPos) {\n    for (var j = 0; j < hunk.lines.length; j++) {\n      var line = hunk.lines[j],\n          operation = line.length > 0 ? line[0] : ' ',\n          content = line.length > 0 ? line.substr(1) : line;\n\n      if (operation === ' ' || operation === '-') {\n        // Context sanity check\n        if (!compareLine(toPos + 1, lines[toPos], operation, content)) {\n          errorCount++;\n\n          if (errorCount > fuzzFactor) {\n            return false;\n          }\n        }\n\n        toPos++;\n      }\n    }\n\n    return true;\n  } // Search best fit offsets for each hunk based on the previous ones\n\n\n  for (var i = 0; i < hunks.length; i++) {\n    var hunk = hunks[i],\n        maxLine = lines.length - hunk.oldLines,\n        localOffset = 0,\n        toPos = offset + hunk.oldStart - 1;\n    var iterator = distanceIterator(toPos, minLine, maxLine);\n\n    for (; localOffset !== undefined; localOffset = iterator()) {\n      if (hunkFits(hunk, toPos + localOffset)) {\n        hunk.offset = offset += localOffset;\n        break;\n      }\n    }\n\n    if (localOffset === undefined) {\n      return false;\n    } // Set lower text limit to end of the current hunk, so next ones don't try\n    // to fit over already patched text\n\n\n    minLine = hunk.offset + hunk.oldStart + hunk.oldLines;\n  } // Apply patch hunks\n\n\n  var diffOffset = 0;\n\n  for (var _i = 0; _i < hunks.length; _i++) {\n    var _hunk = hunks[_i],\n        _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;\n\n    diffOffset += _hunk.newLines - _hunk.oldLines;\n\n    if (_toPos < 0) {\n      // Creating a new file\n      _toPos = 0;\n    }\n\n    for (var j = 0; j < _hunk.lines.length; j++) {\n      var line = _hunk.lines[j],\n          operation = line.length > 0 ? line[0] : ' ',\n          content = line.length > 0 ? line.substr(1) : line,\n          delimiter = _hunk.linedelimiters[j];\n\n      if (operation === ' ') {\n        _toPos++;\n      } else if (operation === '-') {\n        lines.splice(_toPos, 1);\n        delimiters.splice(_toPos, 1);\n        /* istanbul ignore else */\n      } else if (operation === '+') {\n        lines.splice(_toPos, 0, content);\n        delimiters.splice(_toPos, 0, delimiter);\n        _toPos++;\n      } else if (operation === '\\\\') {\n        var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;\n\n        if (previousOperation === '+') {\n          removeEOFNL = true;\n        } else if (previousOperation === '-') {\n          addEOFNL = true;\n        }\n      }\n    }\n  } // Handle EOFNL insertion/removal\n\n\n  if (removeEOFNL) {\n    while (!lines[lines.length - 1]) {\n      lines.pop();\n      delimiters.pop();\n    }\n  } else if (addEOFNL) {\n    lines.push('');\n    delimiters.push('\\n');\n  }\n\n  for (var _k = 0; _k < lines.length - 1; _k++) {\n    lines[_k] = lines[_k] + delimiters[_k];\n  }\n\n  return lines.join('');\n} // Wrapper that supports multiple file patches via callbacks.\n\nfunction applyPatches(uniDiff, options) {\n  if (typeof uniDiff === 'string') {\n    uniDiff = parsePatch(uniDiff);\n  }\n\n  var currentIndex = 0;\n\n  function processIndex() {\n    var index = uniDiff[currentIndex++];\n\n    if (!index) {\n      return options.complete();\n    }\n\n    options.loadFile(index, function (err, data) {\n      if (err) {\n        return options.complete(err);\n      }\n\n      var updatedContent = applyPatch(data, index, options);\n      options.patched(index, updatedContent, function (err) {\n        if (err) {\n          return options.complete(err);\n        }\n\n        processIndex();\n      });\n    });\n  }\n\n  processIndex();\n}\n\nfunction structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof options.context === 'undefined') {\n    options.context = 4;\n  }\n\n  var diff = diffLines(oldStr, newStr, options);\n  diff.push({\n    value: '',\n    lines: []\n  }); // Append an empty value to make cleanup easier\n\n  function contextLines(lines) {\n    return lines.map(function (entry) {\n      return ' ' + entry;\n    });\n  }\n\n  var hunks = [];\n  var oldRangeStart = 0,\n      newRangeStart = 0,\n      curRange = [],\n      oldLine = 1,\n      newLine = 1;\n\n  var _loop = function _loop(i) {\n    var current = diff[i],\n        lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\n    current.lines = lines;\n\n    if (current.added || current.removed) {\n      var _curRange;\n\n      // If we have previous context, start with that\n      if (!oldRangeStart) {\n        var prev = diff[i - 1];\n        oldRangeStart = oldLine;\n        newRangeStart = newLine;\n\n        if (prev) {\n          curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];\n          oldRangeStart -= curRange.length;\n          newRangeStart -= curRange.length;\n        }\n      } // Output our changes\n\n\n      (_curRange = curRange).push.apply(_curRange, _toConsumableArray(lines.map(function (entry) {\n        return (current.added ? '+' : '-') + entry;\n      }))); // Track the updated file position\n\n\n      if (current.added) {\n        newLine += lines.length;\n      } else {\n        oldLine += lines.length;\n      }\n    } else {\n      // Identical context lines. Track line changes\n      if (oldRangeStart) {\n        // Close out any changes that have been output (or join overlapping)\n        if (lines.length <= options.context * 2 && i < diff.length - 2) {\n          var _curRange2;\n\n          // Overlapping\n          (_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray(contextLines(lines)));\n        } else {\n          var _curRange3;\n\n          // end the range and output\n          var contextSize = Math.min(lines.length, options.context);\n\n          (_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray(contextLines(lines.slice(0, contextSize))));\n\n          var hunk = {\n            oldStart: oldRangeStart,\n            oldLines: oldLine - oldRangeStart + contextSize,\n            newStart: newRangeStart,\n            newLines: newLine - newRangeStart + contextSize,\n            lines: curRange\n          };\n\n          if (i >= diff.length - 2 && lines.length <= options.context) {\n            // EOF is inside this hunk\n            var oldEOFNewline = /\\n$/.test(oldStr);\n            var newEOFNewline = /\\n$/.test(newStr);\n            var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;\n\n            if (!oldEOFNewline && noNlBeforeAdds) {\n              // special case: old has no eol and no trailing context; no-nl can end up before adds\n              curRange.splice(hunk.oldLines, 0, '\\\\ No newline at end of file');\n            }\n\n            if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {\n              curRange.push('\\\\ No newline at end of file');\n            }\n          }\n\n          hunks.push(hunk);\n          oldRangeStart = 0;\n          newRangeStart = 0;\n          curRange = [];\n        }\n      }\n\n      oldLine += lines.length;\n      newLine += lines.length;\n    }\n  };\n\n  for (var i = 0; i < diff.length; i++) {\n    _loop(i);\n  }\n\n  return {\n    oldFileName: oldFileName,\n    newFileName: newFileName,\n    oldHeader: oldHeader,\n    newHeader: newHeader,\n    hunks: hunks\n  };\n}\nfunction createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {\n  var diff = structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options);\n  var ret = [];\n\n  if (oldFileName == newFileName) {\n    ret.push('Index: ' + oldFileName);\n  }\n\n  ret.push('===================================================================');\n  ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\\t' + diff.oldHeader));\n  ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\\t' + diff.newHeader));\n\n  for (var i = 0; i < diff.hunks.length; i++) {\n    var hunk = diff.hunks[i];\n    ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');\n    ret.push.apply(ret, hunk.lines);\n  }\n\n  return ret.join('\\n') + '\\n';\n}\nfunction createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {\n  return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);\n}\n\nfunction arrayEqual(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  return arrayStartsWith(a, b);\n}\nfunction arrayStartsWith(array, start) {\n  if (start.length > array.length) {\n    return false;\n  }\n\n  for (var i = 0; i < start.length; i++) {\n    if (start[i] !== array[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction calcLineCount(hunk) {\n  var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines),\n      oldLines = _calcOldNewLineCount.oldLines,\n      newLines = _calcOldNewLineCount.newLines;\n\n  if (oldLines !== undefined) {\n    hunk.oldLines = oldLines;\n  } else {\n    delete hunk.oldLines;\n  }\n\n  if (newLines !== undefined) {\n    hunk.newLines = newLines;\n  } else {\n    delete hunk.newLines;\n  }\n}\nfunction merge(mine, theirs, base) {\n  mine = loadPatch(mine, base);\n  theirs = loadPatch(theirs, base);\n  var ret = {}; // For index we just let it pass through as it doesn't have any necessary meaning.\n  // Leaving sanity checks on this to the API consumer that may know more about the\n  // meaning in their own context.\n\n  if (mine.index || theirs.index) {\n    ret.index = mine.index || theirs.index;\n  }\n\n  if (mine.newFileName || theirs.newFileName) {\n    if (!fileNameChanged(mine)) {\n      // No header or no change in ours, use theirs (and ours if theirs does not exist)\n      ret.oldFileName = theirs.oldFileName || mine.oldFileName;\n      ret.newFileName = theirs.newFileName || mine.newFileName;\n      ret.oldHeader = theirs.oldHeader || mine.oldHeader;\n      ret.newHeader = theirs.newHeader || mine.newHeader;\n    } else if (!fileNameChanged(theirs)) {\n      // No header or no change in theirs, use ours\n      ret.oldFileName = mine.oldFileName;\n      ret.newFileName = mine.newFileName;\n      ret.oldHeader = mine.oldHeader;\n      ret.newHeader = mine.newHeader;\n    } else {\n      // Both changed... figure it out\n      ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);\n      ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);\n      ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);\n      ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);\n    }\n  }\n\n  ret.hunks = [];\n  var mineIndex = 0,\n      theirsIndex = 0,\n      mineOffset = 0,\n      theirsOffset = 0;\n\n  while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {\n    var mineCurrent = mine.hunks[mineIndex] || {\n      oldStart: Infinity\n    },\n        theirsCurrent = theirs.hunks[theirsIndex] || {\n      oldStart: Infinity\n    };\n\n    if (hunkBefore(mineCurrent, theirsCurrent)) {\n      // This patch does not overlap with any of the others, yay.\n      ret.hunks.push(cloneHunk(mineCurrent, mineOffset));\n      mineIndex++;\n      theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;\n    } else if (hunkBefore(theirsCurrent, mineCurrent)) {\n      // This patch does not overlap with any of the others, yay.\n      ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));\n      theirsIndex++;\n      mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;\n    } else {\n      // Overlap, merge as best we can\n      var mergedHunk = {\n        oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),\n        oldLines: 0,\n        newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),\n        newLines: 0,\n        lines: []\n      };\n      mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);\n      theirsIndex++;\n      mineIndex++;\n      ret.hunks.push(mergedHunk);\n    }\n  }\n\n  return ret;\n}\n\nfunction loadPatch(param, base) {\n  if (typeof param === 'string') {\n    if (/^@@/m.test(param) || /^Index:/m.test(param)) {\n      return parsePatch(param)[0];\n    }\n\n    if (!base) {\n      throw new Error('Must provide a base reference or pass in a patch');\n    }\n\n    return structuredPatch(undefined, undefined, base, param);\n  }\n\n  return param;\n}\n\nfunction fileNameChanged(patch) {\n  return patch.newFileName && patch.newFileName !== patch.oldFileName;\n}\n\nfunction selectField(index, mine, theirs) {\n  if (mine === theirs) {\n    return mine;\n  } else {\n    index.conflict = true;\n    return {\n      mine: mine,\n      theirs: theirs\n    };\n  }\n}\n\nfunction hunkBefore(test, check) {\n  return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;\n}\n\nfunction cloneHunk(hunk, offset) {\n  return {\n    oldStart: hunk.oldStart,\n    oldLines: hunk.oldLines,\n    newStart: hunk.newStart + offset,\n    newLines: hunk.newLines,\n    lines: hunk.lines\n  };\n}\n\nfunction mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {\n  // This will generally result in a conflicted hunk, but there are cases where the context\n  // is the only overlap where we can successfully merge the content here.\n  var mine = {\n    offset: mineOffset,\n    lines: mineLines,\n    index: 0\n  },\n      their = {\n    offset: theirOffset,\n    lines: theirLines,\n    index: 0\n  }; // Handle any leading content\n\n  insertLeading(hunk, mine, their);\n  insertLeading(hunk, their, mine); // Now in the overlap content. Scan through and select the best changes from each.\n\n  while (mine.index < mine.lines.length && their.index < their.lines.length) {\n    var mineCurrent = mine.lines[mine.index],\n        theirCurrent = their.lines[their.index];\n\n    if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {\n      // Both modified ...\n      mutualChange(hunk, mine, their);\n    } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {\n      var _hunk$lines;\n\n      // Mine inserted\n      (_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray(collectChange(mine)));\n    } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {\n      var _hunk$lines2;\n\n      // Theirs inserted\n      (_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray(collectChange(their)));\n    } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {\n      // Mine removed or edited\n      removal(hunk, mine, their);\n    } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {\n      // Their removed or edited\n      removal(hunk, their, mine, true);\n    } else if (mineCurrent === theirCurrent) {\n      // Context identity\n      hunk.lines.push(mineCurrent);\n      mine.index++;\n      their.index++;\n    } else {\n      // Context mismatch\n      conflict(hunk, collectChange(mine), collectChange(their));\n    }\n  } // Now push anything that may be remaining\n\n\n  insertTrailing(hunk, mine);\n  insertTrailing(hunk, their);\n  calcLineCount(hunk);\n}\n\nfunction mutualChange(hunk, mine, their) {\n  var myChanges = collectChange(mine),\n      theirChanges = collectChange(their);\n\n  if (allRemoves(myChanges) && allRemoves(theirChanges)) {\n    // Special case for remove changes that are supersets of one another\n    if (arrayStartsWith(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {\n      var _hunk$lines3;\n\n      (_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray(myChanges));\n\n      return;\n    } else if (arrayStartsWith(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {\n      var _hunk$lines4;\n\n      (_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray(theirChanges));\n\n      return;\n    }\n  } else if (arrayEqual(myChanges, theirChanges)) {\n    var _hunk$lines5;\n\n    (_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray(myChanges));\n\n    return;\n  }\n\n  conflict(hunk, myChanges, theirChanges);\n}\n\nfunction removal(hunk, mine, their, swap) {\n  var myChanges = collectChange(mine),\n      theirChanges = collectContext(their, myChanges);\n\n  if (theirChanges.merged) {\n    var _hunk$lines6;\n\n    (_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray(theirChanges.merged));\n  } else {\n    conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);\n  }\n}\n\nfunction conflict(hunk, mine, their) {\n  hunk.conflict = true;\n  hunk.lines.push({\n    conflict: true,\n    mine: mine,\n    theirs: their\n  });\n}\n\nfunction insertLeading(hunk, insert, their) {\n  while (insert.offset < their.offset && insert.index < insert.lines.length) {\n    var line = insert.lines[insert.index++];\n    hunk.lines.push(line);\n    insert.offset++;\n  }\n}\n\nfunction insertTrailing(hunk, insert) {\n  while (insert.index < insert.lines.length) {\n    var line = insert.lines[insert.index++];\n    hunk.lines.push(line);\n  }\n}\n\nfunction collectChange(state) {\n  var ret = [],\n      operation = state.lines[state.index][0];\n\n  while (state.index < state.lines.length) {\n    var line = state.lines[state.index]; // Group additions that are immediately after subtractions and treat them as one \"atomic\" modify change.\n\n    if (operation === '-' && line[0] === '+') {\n      operation = '+';\n    }\n\n    if (operation === line[0]) {\n      ret.push(line);\n      state.index++;\n    } else {\n      break;\n    }\n  }\n\n  return ret;\n}\n\nfunction collectContext(state, matchChanges) {\n  var changes = [],\n      merged = [],\n      matchIndex = 0,\n      contextChanges = false,\n      conflicted = false;\n\n  while (matchIndex < matchChanges.length && state.index < state.lines.length) {\n    var change = state.lines[state.index],\n        match = matchChanges[matchIndex]; // Once we've hit our add, then we are done\n\n    if (match[0] === '+') {\n      break;\n    }\n\n    contextChanges = contextChanges || change[0] !== ' ';\n    merged.push(match);\n    matchIndex++; // Consume any additions in the other block as a conflict to attempt\n    // to pull in the remaining context after this\n\n    if (change[0] === '+') {\n      conflicted = true;\n\n      while (change[0] === '+') {\n        changes.push(change);\n        change = state.lines[++state.index];\n      }\n    }\n\n    if (match.substr(1) === change.substr(1)) {\n      changes.push(change);\n      state.index++;\n    } else {\n      conflicted = true;\n    }\n  }\n\n  if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {\n    conflicted = true;\n  }\n\n  if (conflicted) {\n    return changes;\n  }\n\n  while (matchIndex < matchChanges.length) {\n    merged.push(matchChanges[matchIndex++]);\n  }\n\n  return {\n    merged: merged,\n    changes: changes\n  };\n}\n\nfunction allRemoves(changes) {\n  return changes.reduce(function (prev, change) {\n    return prev && change[0] === '-';\n  }, true);\n}\n\nfunction skipRemoveSuperset(state, removeChanges, delta) {\n  for (var i = 0; i < delta; i++) {\n    var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);\n\n    if (state.lines[state.index + i] !== ' ' + changeContent) {\n      return false;\n    }\n  }\n\n  state.index += delta;\n  return true;\n}\n\nfunction calcOldNewLineCount(lines) {\n  var oldLines = 0;\n  var newLines = 0;\n  lines.forEach(function (line) {\n    if (typeof line !== 'string') {\n      var myCount = calcOldNewLineCount(line.mine);\n      var theirCount = calcOldNewLineCount(line.theirs);\n\n      if (oldLines !== undefined) {\n        if (myCount.oldLines === theirCount.oldLines) {\n          oldLines += myCount.oldLines;\n        } else {\n          oldLines = undefined;\n        }\n      }\n\n      if (newLines !== undefined) {\n        if (myCount.newLines === theirCount.newLines) {\n          newLines += myCount.newLines;\n        } else {\n          newLines = undefined;\n        }\n      }\n    } else {\n      if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {\n        newLines++;\n      }\n\n      if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {\n        oldLines++;\n      }\n    }\n  });\n  return {\n    oldLines: oldLines,\n    newLines: newLines\n  };\n}\n\n// See: http://code.google.com/p/google-diff-match-patch/wiki/API\nfunction convertChangesToDMP(changes) {\n  var ret = [],\n      change,\n      operation;\n\n  for (var i = 0; i < changes.length; i++) {\n    change = changes[i];\n\n    if (change.added) {\n      operation = 1;\n    } else if (change.removed) {\n      operation = -1;\n    } else {\n      operation = 0;\n    }\n\n    ret.push([operation, change.value]);\n  }\n\n  return ret;\n}\n\nfunction convertChangesToXML(changes) {\n  var ret = [];\n\n  for (var i = 0; i < changes.length; i++) {\n    var change = changes[i];\n\n    if (change.added) {\n      ret.push('<ins>');\n    } else if (change.removed) {\n      ret.push('<del>');\n    }\n\n    ret.push(escapeHTML(change.value));\n\n    if (change.added) {\n      ret.push('</ins>');\n    } else if (change.removed) {\n      ret.push('</del>');\n    }\n  }\n\n  return ret.join('');\n}\n\nfunction escapeHTML(s) {\n  var n = s;\n  n = n.replace(/&/g, '&amp;');\n  n = n.replace(/</g, '&lt;');\n  n = n.replace(/>/g, '&gt;');\n  n = n.replace(/\"/g, '&quot;');\n  return n;\n}\n\n/* See LICENSE file for terms of use */\n\nexport { Diff, diffChars, diffWords, diffWordsWithSpace, diffLines, diffTrimmedLines, diffSentences, diffCss, diffJson, diffArrays, structuredPatch, createTwoFilesPatch, createPatch, applyPatch, applyPatches, parsePatch, merge, convertChangesToDMP, convertChangesToXML, canonicalize };\n","import { ReplaceStep } from \"prosemirror-transform\";\nimport { Node } from \"prosemirror-model\";\n\n\nexport function getReplaceStep(fromDoc: Node, toDoc: Node) {\n    let start = toDoc.content.findDiffStart(fromDoc.content);\n    if (start === null) {\n        return false;\n    }\n\n    // @ts-ignore property access to content\n    let { a: endA, b: endB } = toDoc.content.findDiffEnd(fromDoc.content);\n    const overlap = start - Math.min(endA, endB);\n    if (overlap > 0) {\n        // If there is an overlap, there is some freedom of choice in how to calculate the\n        // start/end boundary. for an inserted/removed slice. We choose the extreme with\n        // the lowest depth value.\n        if (fromDoc.resolve(start - overlap).depth < toDoc.resolve(endA + overlap).depth) {\n            start -= overlap;\n\n        } else {\n            endA += overlap;\n            endB += overlap;\n        }\n    }\n\n    return new ReplaceStep(start, endB, toDoc.slice(start, endA));\n}\n","import { Transform } from \"prosemirror-transform\";\nimport { Node } from \"prosemirror-model\";\n\n\nexport function removeMarks(doc: Node) {\n    const tr = new Transform(doc);\n    tr.removeMark(0, doc.nodeSize - 2);\n    return tr.doc;\n}\n","export function copy<T>(value: T): T {\n    return JSON.parse(JSON.stringify(value));\n}\n","import { Transform } from \"prosemirror-transform\";\nimport { Node, Schema } from \"prosemirror-model\";\nimport { applyPatch, createPatch, Operation } from \"rfc6902\";\nimport { diffWordsWithSpace, diffChars } from \"diff\";\nimport { AnyObject } from \"./types\";\nimport { getReplaceStep } from \"./getReplaceStep\";\nimport { simplifyTransform } from \"./simplifyTransform\";\nimport { removeMarks } from \"./removeMarks\";\nimport { getFromPath } from \"./getFromPath\";\nimport { copy } from \"./copy\";\n\n\nexport interface Options {\n    complexSteps?: boolean;\n    wordDiffs?: boolean;\n    simplifyDiff?: boolean;\n}\n\n\n// const logStyle = \"color: #fff; background: #333; padding: 2px;\";\n\n\nexport class RecreateTransform {\n    fromDoc: Node;\n    toDoc: Node;\n    complexSteps: boolean;\n    wordDiffs: boolean;\n    simplifyDiff: boolean;\n    schema: Schema;\n    tr: Transform;\n    /* current working document data, may get updated while recalculating node steps */\n    currentJSON: AnyObject;\n    /* final document as json data */\n    finalJSON: AnyObject;\n    ops: Array<Operation>;\n\n    constructor(fromDoc: Node, toDoc: Node, options: Options = {}) {\n        const o = {\n            complexSteps: true,\n            wordDiffs: false,\n            simplifyDiff: true,\n            ...options\n        };\n\n        this.fromDoc = fromDoc;\n        this.toDoc = toDoc;\n        this.complexSteps = o.complexSteps; // Whether to return steps other than ReplaceSteps\n        this.wordDiffs = o.wordDiffs; // Whether to make text diffs cover entire words\n        this.simplifyDiff = o.simplifyDiff;\n        this.schema = fromDoc.type.schema;\n        this.tr = new Transform(fromDoc);\n    }\n\n    init() {\n        if (this.complexSteps) {\n            // For First steps: we create versions of the documents without marks as\n            // these will only confuse the diffing mechanism and marks won't cause\n            // any mapping changes anyway.\n            this.currentJSON = removeMarks(this.fromDoc).toJSON();\n            this.finalJSON = removeMarks(this.toDoc).toJSON();\n            this.ops = createPatch(this.currentJSON, this.finalJSON);\n            this.recreateChangeContentSteps();\n            this.recreateChangeMarkSteps();\n\n        } else {\n            // We don't differentiate between mark changes and other changes.\n            this.currentJSON = this.fromDoc.toJSON();\n            this.finalJSON = this.toDoc.toJSON();\n            this.ops = createPatch(this.currentJSON, this.finalJSON);\n            this.recreateChangeContentSteps();\n        }\n\n        if (this.simplifyDiff) {\n            this.tr = simplifyTransform(this.tr) || this.tr;\n        }\n\n        return this.tr;\n    }\n\n    /** convert json-diff to prosemirror steps */\n    recreateChangeContentSteps() {\n        // First step: find content changing steps.\n        let ops = [];\n        while (this.ops.length) {\n            // get next\n            let op = this.ops.shift();\n            ops.push(op);\n\n            let toDoc;\n            const afterStepJSON = copy(this.currentJSON); // working document receiving patches\n            const pathParts = op.path.split(\"/\");\n\n            // collect operations until we receive a valid document:\n            // apply ops-patches until a valid prosemirror document is retrieved,\n            // then try to create a transformation step or retry with next operation\n            while (toDoc == null) {\n                applyPatch(afterStepJSON, [op]);\n\n                try {\n                    toDoc = this.schema.nodeFromJSON(afterStepJSON);\n                    toDoc.check();\n\n                } catch (error) {\n                    toDoc = null;\n                    if (this.ops.length > 0) {\n                        op = this.ops.shift();\n                        ops.push(op);\n\n                    } else {\n                        throw new Error(`No valid diff possible applying ${op.path}`);\n                    }\n                }\n            }\n\n            // apply operation (ignoring afterStepJSON)\n            if (this.complexSteps && ops.length === 1 && (pathParts.includes(\"attrs\") || pathParts.includes(\"type\"))) {\n                // Node markup is changing\n                this.addSetNodeMarkup(); // a lost update is ignored\n                ops = [];\n                // console.log(\"%cop\", logStyle, \"- update node\", ops);\n\n            } else if (ops.length === 1 && op.op === \"replace\" && pathParts[pathParts.length - 1] === \"text\") {\n                // Text is being replaced, we apply text diffing to find the smallest possible diffs.\n                this.addReplaceTextSteps(op, afterStepJSON);\n                ops = [];\n                // console.log(\"%cop\", logStyle, \"- replace\", ops);\n\n            } else if (this.addReplaceStep(toDoc, afterStepJSON)) {\n                // operations have been applied\n                ops = [];\n                // console.log(\"%cop\", logStyle, \"- other\", ops);\n            }\n        }\n    }\n\n    /** update node with attrs and marks, may also change type */\n    addSetNodeMarkup() {\n        // first diff in document is supposed to be a node-change (in type and/or attributes)\n        // thus simply find the first change and apply a node change step, then recalculate the diff\n        // after updating the document\n        const fromDoc = this.schema.nodeFromJSON(this.currentJSON);\n        const toDoc = this.schema.nodeFromJSON(this.finalJSON);\n        const start = toDoc.content.findDiffStart(fromDoc.content);\n        // @note start is the same (first) position for current and target document\n        const fromNode = fromDoc.nodeAt(start);\n        const toNode = toDoc.nodeAt(start);\n\n        if (start != null) {\n            // @note this completly updates all attributes in one step, by completely replacing node\n            const nodeType = fromNode.type === toNode.type ? null : toNode.type;\n            try {\n                this.tr.setNodeMarkup(start, nodeType, toNode.attrs, toNode.marks);\n            } catch (e) {\n                // if nodetypes differ, the updated node-type and contents might not be compatible\n                // with schema and requires a replace\n                if (nodeType && e.message.includes(\"Invalid content\")) {\n                    // @todo add test-case for this scenario\n                    this.tr.replaceWith(start, start + fromNode.nodeSize, toNode);\n                } else {\n                    throw e;\n                }\n            }\n            this.currentJSON = removeMarks(this.tr.doc).toJSON();\n            // setting the node markup may have invalidated the following ops, so we calculate them again.\n            this.ops = createPatch(this.currentJSON, this.finalJSON);\n            return true;\n        }\n        return false;\n    }\n\n    recreateChangeMarkSteps() {\n        // Now the documents should be the same, except their marks, so everything should map 1:1.\n        // Second step: Iterate through the toDoc and make sure all marks are the same in tr.doc\n        this.toDoc.descendants((tNode, tPos) => {\n            if (!tNode.isInline) {\n                return true;\n            }\n\n            this.tr.doc.nodesBetween(tPos, tPos + tNode.nodeSize, (fNode, fPos) => {\n                if (!fNode.isInline) {\n                    return true;\n                }\n                const from = Math.max(tPos, fPos);\n                const to = Math.min(tPos + tNode.nodeSize, fPos + fNode.nodeSize);\n                fNode.marks.forEach(nodeMark => {\n                    if (!nodeMark.isInSet(tNode.marks)) {\n                        this.tr.removeMark(from, to, nodeMark);\n                    }\n                });\n                tNode.marks.forEach(nodeMark => {\n                    if (!nodeMark.isInSet(fNode.marks)) {\n                        this.tr.addMark(from, to, nodeMark);\n                    }\n                });\n            });\n        });\n    }\n\n    /**\n     * retrieve and possibly apply replace-step based from doc changes\n     * From http://prosemirror.net/examples/footnote/\n     */\n    addReplaceStep(toDoc: Node, afterStepJSON: AnyObject) {\n        const fromDoc = this.schema.nodeFromJSON(this.currentJSON);\n        const step = getReplaceStep(fromDoc, toDoc);\n\n        if (!step) {\n            return false;\n\n        } else if (!this.tr.maybeStep(step).failed) {\n            this.currentJSON = afterStepJSON;\n            return true; // @change previously null\n        }\n\n        throw new Error(\"No valid step found.\");\n    }\n\n    /** retrieve and possibly apply text replace-steps based from doc changes */\n    addReplaceTextSteps(op, afterStepJSON) {\n        // We find the position number of the first character in the string\n        const op1 = { ...op, value: \"xx\" };\n        const op2 = { ...op, value: \"yy\" };\n        const afterOP1JSON = copy(this.currentJSON);\n        const afterOP2JSON = copy(this.currentJSON);\n        applyPatch(afterOP1JSON, [op1]);\n        applyPatch(afterOP2JSON, [op2]);\n        const op1Doc = this.schema.nodeFromJSON(afterOP1JSON);\n        const op2Doc = this.schema.nodeFromJSON(afterOP2JSON);\n\n        // get text diffs\n        const finalText = op.value;\n        const currentText = getFromPath(this.currentJSON, op.path);\n        const textDiffs = this.wordDiffs ?\n            diffWordsWithSpace(currentText, finalText) :\n            diffChars(currentText, finalText);\n\n        let offset = op1Doc.content.findDiffStart(op2Doc.content);\n        const marks = op1Doc.resolve(offset + 1).marks();\n\n        while (textDiffs.length) {\n            const diff = textDiffs.shift();\n\n            if (diff.added) {\n                const textNode = this.schema.nodeFromJSON({ type: \"text\", text: diff.value }).mark(marks);\n\n                if (textDiffs.length && textDiffs[0].removed) {\n                    const nextDiff = textDiffs.shift();\n                    this.tr.replaceWith(offset, offset + nextDiff.value.length, textNode);\n\n                } else {\n                    this.tr.insert(offset, textNode);\n                }\n                offset += diff.value.length;\n\n            } else if (diff.removed) {\n\n                if (textDiffs.length && textDiffs[0].added) {\n                    const nextDiff = textDiffs.shift();\n                    const textNode = this.schema.nodeFromJSON({ type: \"text\", text: nextDiff.value }).mark(marks);\n                    this.tr.replaceWith(offset, offset + diff.value.length, textNode);\n                    offset += nextDiff.value.length;\n\n                } else {\n                    this.tr.delete(offset, offset + diff.value.length);\n                }\n\n            } else {\n                offset += diff.value.length;\n            }\n        }\n\n        this.currentJSON = afterStepJSON;\n    }\n}\n\n\nexport function recreateTransform(fromDoc: Node, toDoc: Node, options: Options = {}): Transform {\n    const recreator = new RecreateTransform(fromDoc, toDoc, options);\n    return recreator.init();\n}\n","import { Transform, ReplaceStep, Step } from \"prosemirror-transform\";\nimport { getReplaceStep } from \"./getReplaceStep\";\n\n\n// join adjacent ReplaceSteps\nexport function simplifyTransform(tr: Transform) {\n    if (!tr.steps.length) {\n        return undefined;\n    }\n\n    const newTr = new Transform(tr.docs[0]);\n    const oldSteps = tr.steps.slice();\n\n    while (oldSteps.length) {\n        let step = oldSteps.shift();\n        while (oldSteps.length && step.merge(oldSteps[0])) {\n            const addedStep = oldSteps.shift();\n            if (step instanceof ReplaceStep && addedStep instanceof ReplaceStep) {\n                step = getReplaceStep(newTr.doc, addedStep.apply(step.apply(newTr.doc).doc).doc) as Step<any>;\n            } else {\n                step = step.merge(addedStep);\n            }\n        }\n        newTr.step(step);\n    }\n    return newTr;\n}\n","import { AnyObject } from \"./types\";\n\n\n/**\n * get target value from json-pointer (e.g. /content/0/content)\n * @param  {AnyObject} obj  object to resolve path into\n * @param  {string}    path json-pointer\n * @return {any} target value\n */\nexport function getFromPath(obj: AnyObject, path: string): any {\n    const pathParts = path.split(\"/\");\n    pathParts.shift(); // remove root-entry\n    while (pathParts.length) {\n        const property = pathParts.shift();\n        obj = obj[property];\n    }\n    return obj;\n}\n"],"sourceRoot":""}